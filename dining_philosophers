#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t room;
sem_t *chopstick;
int n;

void *philosopher(void *);
void eat(int);

int main() {
    int i;
    pthread_t *tid;
    int *a;

    printf("Enter the number of philosophers: ");
    scanf("%d", &n);

    tid = (pthread_t *)malloc(n * sizeof(pthread_t));
    a = (int *)malloc(n * sizeof(int));
    chopstick = (sem_t *)malloc(n * sizeof(sem_t));

    sem_init(&room, 0, n - 1);
    for (i = 0; i < n; i++)
        sem_init(&chopstick[i], 0, 1);

    for (i = 0; i < n; i++) {
        a[i] = i;
        pthread_create(&tid[i], NULL, philosopher, (void *)&a[i]);
    }

    for (i = 0; i < n; i++)
        pthread_join(tid[i], NULL);

    for (i = 0; i < n; i++)
        sem_destroy(&chopstick[i]);
    sem_destroy(&room);

    free(tid);
    free(a);
    free(chopstick);

    return 0;
}

void *philosopher(void *num) {
    int phil = *(int *)num;
    sem_wait(&room);
    printf("\nPhilosopher %d has entered the room", phil);
    sem_wait(&chopstick[phil]);
    sem_wait(&chopstick[(phil + 1) % n]);
    eat(phil);
    sleep(2);
    printf("\nPhilosopher %d has finished eating", phil);
    sem_post(&chopstick[(phil + 1) % n]);
    sem_post(&chopstick[phil]);
    sem_post(&room);
}

void eat(int phil) {
    printf("\nPhilosopher %d is eating", phil);
}
