#include<stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int weight; // Priority or weight of the process
    int executed; // Execution time already completed
    int remaining; // Remaining execution time
} Process;

void proportional_scheduling(Process processes[], int n);

int main() {
    int n;
    printf("Enter the number of processes:\n");
    scanf("%d", &n);

    Process processes[MAX_PROCESSES];

    printf("Enter the weight of each process:\n");
    for(int i = 0; i < n; i++) {
        printf("Enter the weight for process %d:\n", i + 1);
        scanf("%d", &processes[i].weight);
        processes[i].executed = 0;
        processes[i].remaining = processes[i].weight; // Initial remaining time is set to the weight
    }

    proportional_scheduling(processes, n);

    return 0;
}

void proportional_scheduling(Process processes[], int n) {
    int total_weight = 0;
    for (int i = 0; i < n; i++) {
        total_weight += processes[i].weight;
    }

    int time = 0;
    printf("Proportional Scheduling:\n");
    printf("Time\tProcess\n");
    while (1) {
        int all_finished = 1;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining > 0) {
                all_finished = 0;
                int allocated_time = (processes[i].weight * 100) / total_weight;
                if (allocated_time > processes[i].remaining) {
                    allocated_time = processes[i].remaining;
                }
                printf("%d-%d\tP%d\n", time, time + allocated_time, i + 1);
                processes[i].remaining -= allocated_time;
                processes[i].executed += allocated_time;
                time += allocated_time;
            }
        }
        if (all_finished)
            break;
    }
}

//output:
Enter the number of processes:
3
Enter the weight of each process:
Enter the weight for process 1:
3
Enter the weight for process 2:
2
Enter the weight for process 3:
1
Proportional Scheduling:
Time    Process
0-60    P1
60-100  P2
100-120 P3
