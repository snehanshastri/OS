#include <stdio.h>

struct Process {
    int processId;
    int burstTime;
    int priority;
    int arrivalTime;
    int waitingTime;
    int turnAroundTime;
};

void main() {
    int n, i, j, totalWaitingTime = 0, totalTurnAroundTime = 0;
    struct Process processes[10];
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nEnter details for process %d\n", i + 1);
        printf("Process ID: ");
        scanf("%d", &processes[i].processId);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        processes[i].waitingTime = -1;
    }

    // Sorting the processes based on arrival time
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (processes[i].arrivalTime > processes[j].arrivalTime) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    int currentTime = 0;

    // Non-preemptive Priority Scheduling considering arrival time
    for (i = 0; i < n; i++) {
        int highestPriorityIndex = -1;
        int minPriority = 1000;
        for (j = 0; j < n; j++) {
            if (processes[j].arrivalTime <= currentTime && processes[j].waitingTime == -1) {
                if (processes[j].priority < minPriority) {
                    minPriority = processes[j].priority;
                    highestPriorityIndex = j;
                }
            }
        }
        if (highestPriorityIndex != -1) {
            currentTime = (currentTime > processes[highestPriorityIndex].arrivalTime) ? currentTime : processes[highestPriorityIndex].arrivalTime;
            processes[highestPriorityIndex].waitingTime = currentTime - processes[highestPriorityIndex].arrivalTime;
            processes[highestPriorityIndex].turnAroundTime = processes[highestPriorityIndex].waitingTime + processes[highestPriorityIndex].burstTime;
            currentTime += processes[highestPriorityIndex].burstTime;
            totalWaitingTime += processes[highestPriorityIndex].waitingTime;
            totalTurnAroundTime += processes[highestPriorityIndex].turnAroundTime;
        }
    }

    printf("\nProcesses after scheduling:\n");
    printf("Process ID\tBurst Time\tPriority\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
            processes[i].processId,
            processes[i].burstTime,
            processes[i].priority,
            processes[i].arrivalTime,
            processes[i].waitingTime,
            processes[i].turnAroundTime);
    }

    printf("\nAverage Waiting Time: %f\n", (float)totalWaitingTime / n);
    printf("Average Turnaround Time: %f\n", (float)totalTurnAroundTime / n);
}
