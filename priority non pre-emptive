#include <stdio.h>
#include <conio.h>
struct Process {
 int processId;
 int burstTime;
 int priority;
 int waitingTime;
 int turnAroundTime;
};
void main() {
 int n, i, j, totalWaitingTime = 0, totalTurnAroundTime = 0;  struct Process processes[10];
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 for (i = 0; i < n; i++) {
 printf("\nEnter details for process %d\n", i + 1);
 printf("Process ID: ");
 scanf("%d", &processes[i].processId);
 printf("Burst Time: ");
 scanf("%d", &processes[i].burstTime);
 printf("Priority: ");
 scanf("%d", &processes[i].priority);
 }
 // Sorting the processes based on priority (non-preemptive)
 for (i = 0; i < n; i++) {
 for (j = i + 1; j < n; j++) {
 if (processes[i].priority > processes[j].priority) {
 // Swap processes[i] and processes[j]
 struct Process temp = processes[i];
 processes[i] = processes[j];
 processes[j] = temp;
 }
 }
 }
 printf("\nProcesses after sorting by priority:\n");
 printf("Process ID\tBurst Time\tPriority\n");
 for (i = 0; i < n; i++) {
 printf("%d\t\t%d\t\t%d\n", processes[i].processId, processes[i].burstTime, processes[i].priority);  }
 // Calculate waiting time and turnaround time
 processes[0].waitingTime = 0;
 for (i = 1; i < n; i++) {
 processes[i].waitingTime = processes[i - 1].burstTime + processes[i - 1].waitingTime;  totalWaitingTime += processes[i].waitingTime;
 }
 printf("\nProcess ID\tWaiting Time\tTurnaround Time\n");
 for (i = 0; i < n; i++) {
 processes[i].turnAroundTime = processes[i].burstTime + processes[i].waitingTime;  totalTurnAroundTime += processes[i].turnAroundTime;
 printf("%d\t\t%d\t\t%d\n", processes[i].processId, processes[i].waitingTime,  processes[i].turnAroundTime);
 }
 printf("\nAverage Waiting Time: %f\n", (float)totalWaitingTime / n);  printf("Average Turnaround Time: %f\n", (float)totalTurnAroundTime / n); }

